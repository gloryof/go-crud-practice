// Code generated by MockGen. DO NOT EDIT.
// Source: crud/externals/gorp/tables/users.go

// Package tables_mock is a generated GoMock package.
package tables_mock

import (
	tables "github.com/gloryof/go-crud-practice/crud/externals/gorp/tables"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsersDao is a mock of UsersDao interface
type MockUsersDao struct {
	ctrl     *gomock.Controller
	recorder *MockUsersDaoMockRecorder
}

// MockUsersDaoMockRecorder is the mock recorder for MockUsersDao
type MockUsersDaoMockRecorder struct {
	mock *MockUsersDao
}

// NewMockUsersDao creates a new mock instance
func NewMockUsersDao(ctrl *gomock.Controller) *MockUsersDao {
	mock := &MockUsersDao{ctrl: ctrl}
	mock.recorder = &MockUsersDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersDao) EXPECT() *MockUsersDaoMockRecorder {
	return m.recorder
}

// SelectAll mocks base method
func (m *MockUsersDao) SelectAll() []tables.Users {
	ret := m.ctrl.Call(m, "SelectAll")
	ret0, _ := ret[0].([]tables.Users)
	return ret0
}

// SelectAll indicates an expected call of SelectAll
func (mr *MockUsersDaoMockRecorder) SelectAll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockUsersDao)(nil).SelectAll))
}

// SelectByID mocks base method
func (m *MockUsersDao) SelectByID(id uint64) (tables.Users, bool) {
	ret := m.ctrl.Call(m, "SelectByID", id)
	ret0, _ := ret[0].(tables.Users)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID
func (mr *MockUsersDaoMockRecorder) SelectByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockUsersDao)(nil).SelectByID), id)
}

// Insert mocks base method
func (m *MockUsersDao) Insert(user tables.Users) bool {
	ret := m.ctrl.Call(m, "Insert", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockUsersDaoMockRecorder) Insert(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersDao)(nil).Insert), user)
}

// Update mocks base method
func (m *MockUsersDao) Update(user tables.Users) bool {
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUsersDaoMockRecorder) Update(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersDao)(nil).Update), user)
}

// DeleteByID mocks base method
func (m *MockUsersDao) DeleteByID(id uint64) bool {
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockUsersDaoMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUsersDao)(nil).DeleteByID), id)
}

// SelectNextID mocks base method
func (m *MockUsersDao) SelectNextID() (uint64, bool) {
	ret := m.ctrl.Call(m, "SelectNextID")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SelectNextID indicates an expected call of SelectNextID
func (mr *MockUsersDaoMockRecorder) SelectNextID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectNextID", reflect.TypeOf((*MockUsersDao)(nil).SelectNextID))
}
